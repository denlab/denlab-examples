var Benchmark = require('benchmark');

//var safeNumberRegEx = /^(?:0|(?:\-?[1-9][0-9]*))$/;
//var safeNumberRegEx = /^\-?[1-9][0-9]*$/;
var safeNumberRegEx = /^(0|(\-?[1-9][0-9]*))$/;
var number = '-123426456';
var unnumber = 'foo bar baz';
var typeOfString = "string";
var typeOfNumber = "number";
var maxSafeInt = 9007199254740991; // Number.MAX_SAFE_INTEGER in es6
var minSafeInt = -9007199254740991; // Number.MIN_SAFE_INTEGER in es6
var isArray = Array.isArray;
var isInteger = Number.isInteger;
var floor = Math.floor;
var abs = Math.abs;

function byChar(val) {
    var type = typeof val;
    if (type === typeOfNumber) {
        return isInteger(val) && !(val < minSafeInt || val > maxSafeInt);
    }
    if (type !== typeOfString) {
        return false;
    }
    var length = val.length;
    if (length === 0 || length > 17) {
        return false;
    }
    if (val === '0') {
        return true;
    }
    var i = 1;
    var c = val[0];
    if (c === '-') {
        if (length < 2) {
            return false;
        }
        i = 2;
        c = val[1];
    }
    if (c > '9' || c < '1') {
        return false;
    }
    for (; i<length; i++) {
        c = val[i];
        if (c > '9' || c < '1') {
            return false;
        }        
    }
    if (length < 16) {
        return true;
    }
    var num = +val;
    return !(num < minSafeInt || num > maxSafeInt);
}

function isNumber(val) {
    // parseFloat NaNs numeric-cast false positives (null|true|false|"")
    // ...but misinterprets leading-number strings, particularly hex literals ("0x...")
    // subtraction forces infinities to NaN
    // adding 1 corrects loss of precision from parseFloat (#15100)
    return !isArray(val) && (val - parseFloat(val) + 1) >= 0;
}

function isSafeNumber(val) {
    var num = val;
    var isString = false;
    var type = typeof val;
    if (type === typeOfString) {
        isString = true;
        num = +val;
    } else if (type !== typeOfNumber) {
        return false;
    }
    if (isNaN(num) || num < minSafeInt || num > maxSafeInt) {
        return false;
    }
    if (isString) {
        return '' + num === val;
    }
    return true;
}

function isSafeNumber2(val) {
    var num = val;
    var isString = false;
    var type = typeof val;
    if (type === typeOfString) {
        isString = true;
        num = +val;
    } else if (type !== typeOfNumber) {
        return false;
    }
    if (!isInteger(num) || num < minSafeInt || num > maxSafeInt) {
        return false;
    }
    if (isString) {
        return '' + num === val;
    }
    return true;
}

function isRegExNumber(val) {
    var num = val;
    var isString = false;
    var type = typeof val;
    if (type === typeOfString) {
        isString = true;
        if (!safeNumberRegEx.test(val)) {
            return false;
        }
        num = +val;
    } else if (type !== typeOfNumber) {
        return false;
    }
    if (isNaN(num) || num < minSafeInt || num > maxSafeInt) {
        return false;
    }
    if (isString) {
        return '' + num === val;
    }
    return true;
}

function isRegExNumber2(val) {
    var num = val;
    var type = typeof val;
    if (type === typeOfString) {
        var length = val.length;
        if (length === 0 || length > 17) {
            return false;
        }
        if (!safeNumberRegEx.test(val)) {
            return false;
        }
        if (length < 16) {
            return true;
        }
        num = +val;
    } else if (type !== typeOfNumber) {
        return false;
    }
    return num % 1 === 0 && (num < 0 ? -num : num) <= maxSafeInt;
}

function isRegExNumber3(val) {
    var num = val;
    var type = typeof val;
    if (type === typeOfString) {
        if (!safeNumberRegEx.test(val)) {
            return false;
        }
        num = +val;
    } else if (type !== typeOfNumber) {
        return false;
    }
    return (num|0 === num) && !(num < minSafeInt || num > maxSafeInt);
}

(new Benchmark.Suite()).
// add tests
add('isRegExNumber2 int', function() {
    return isRegExNumber2(1234234);
}).
add('isRegExNumber2 float', function() {
    return isRegExNumber2(1234.123);
}).
add('isRegExNumber2 number', function() {
    return isRegExNumber2(number);
}).
add('isRegExNumber2 unnumber', function() {
    return isRegExNumber2(unnumber);
}).
add('isRegExNumber3 number', function() {
    return isRegExNumber3(number);
}).
add('isRegExNumber3 unnumber', function() {
    return isRegExNumber3(unnumber);
}).
add('isRegExNumber number', function() {
    return isRegExNumber(number);
}).
add('isRegExNumber unnumber', function() {
    return isRegExNumber(unnumber);
}).
add('String parseInt number', function() {
    return number === String(parseInt(number, 10));
}).
add('String parseInt unnumber', function() {
    return unnumber === String(parseInt(unnumber, 10));
}).
add('byChar number', function() {
    return byChar(number);
}).
add('byChar unnumber', function() {
    return byChar(unnumber);
}).
add('isNumber number', function() {
    return isNumber(number);
}).
add('isNumber unnumber', function() {
    return isNumber(unnumber);
}).
add('isSafeNumber number', function() {
    return isSafeNumber(number);
}).
add('isSafeNumber unnumber', function() {
    return isSafeNumber(unnumber);
}).
add('isSafeNumber2 number', function() {
    return isSafeNumber2(number);
}).
add('isSafeNumber2 unnumber', function() {
    return isSafeNumber2(unnumber);
}).
// add listeners
on('cycle', function(event) {
    console.log(String(event.target));
}).
on('complete', function() {
    console.log('Fastest is ' + this.filter('fastest').map('name'));
}).
// run async
run({ 'async': true });
